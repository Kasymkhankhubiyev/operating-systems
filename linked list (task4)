#include<stdio.h>
#include<string.h>
#include<stdlib.h>

#define STRING_MAX_SIZE 255

typedef struct List {
 char *string;
 struct List *next;
} List;

List *init_List(){
 List *list = (List *)malloc(sizeof(list));
 if (list){
  list-> string = NULL;
  list-> next = NULL;
 }
 return list;
}

void clear(List *list) {
 List *current_list = list;
 while (current_list) {
  if (current_list->string) {
   free(current_list->string);
  }
  List *to_delete = current_list;
  current_list = current_list->next;
  free(to_delete);
 }
}

void print_strings(List *list) {
 List *current_list = list;
 while (current_list) {
  printf("%s\n", current_list->string);
  current_list = current_list->next;
 }//while (current_list);
}

int push(List **list, char *string) {
 if (!*list) {
  *list = init_List();
  if (!*list) {
   perror("List didn't init\n");
   return -1;
  }
  (*list)->string = string;
 }
 else {
  List *last_list = *list;
  while (last_list->next) {
   last_list = last_list->next;
  }// while (last_list->next);
  List *new_list = init_List();
  new_list->string = string;
  last_list->next = new_list;
  if (!new_list) {
   perror("List can't add more string\n");
   print_strings(*list);
   clear(*list);
   return -1;
  }
 }
}

void push_string(char * string, List **list){
 size_t string_lenght = strlen(string);
 List *current_list = *list;
   char *tmp = (char *) malloc(string_lenght);
   if (tmp) {
    memcpy(tmp, string, string_lenght);
    if (tmp[string_lenght - 1] == '\n') {
     tmp[string_lenght - 1] = '\0';
    }
    push(&current_list, tmp);
 }
}

int main() {
 int i = 0;
 char string[STRING_MAX_SIZE];
 List *list = NULL;
 printf("Enter your strings. String ends with \".\" :\n");
 //if (fgets(string, STRING_MAX_SIZE, stdin) != NULL) {
 while (*(fgets(string, STRING_MAX_SIZE, stdin)) != '.') {
  if(string!= NULL){
   size_t string_lenght = strlen(string);
   char *tmp = (char *) malloc(string_lenght + 1);
   if (tmp) {
    memcpy(tmp, string, string_lenght);
    if (tmp[string_lenght - 1] == '\n') {
     tmp[string_lenght - 1] = '\0';
    }
    push(&list, tmp);
   }
  }else {
    perror("fgets return NULL\n");
    return -1;
  }
 }
  print_strings(list);
  clear(list);
 return 0;
}
